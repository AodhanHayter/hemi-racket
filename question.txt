The root of my problem is that I need to be able to get the total number of bytes that have been downloaded to display a progress bar as part of a cli tool.

I'm downloading a file through an HTTP GET request. Using the "Content-Length" http header I can see the total size of the file I will be downloading with my client. I figured I would then just do the old **"downloaded / total = progress"** formula.

My current implementation can fetch the file and write it to the local filesystem no problem so the setup of the request and ports works as expected, I really just need some guidance on how one would get some insight into what the input port is actually doing (events?) I'm very new to Racket.

I'm using the the following library for making the http requests:

 https://docs.racket-lang.org/http/index.html?q=http

I've taken a look at the source to see if there's any clues there:

https://github.com/greghendershott/http/blob/master/http/request.rkt#L505

    #| Basically just for debugging/testing recieves the default input port from the call/input-request procedure

    (define (handle-entity in headers)
      (display headers)

      #| looking at source this "read-entity/transfer-decoding-port" should be useful for what I want to do
      (define decoded-port (read-entity/transfer-decoding-port in headers))

      #| writing the file works as expected, what I really want to do is get the download progress as I write out to filesystem, what I really want to do is get the download progress as I write out to filesystem.
      (call-with-output-file "test.tar.gz"
                            (lambda (out)
                              (display (port->bytes decoded-port) out))))

    (define (fetch)
      (call/input-request "1.1"
                          "GET"
                          "https://example.com/test.tar.gz"
                          empty
                          handle-entity #| will handle the input port created in this procedure
                          #:redirects 10))
